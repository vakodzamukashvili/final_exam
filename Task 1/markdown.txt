{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Mini Encrypted Messaging System\
\
## Summary\
A secure messaging setup using hybrid encryption: AES for speed, RSA for key protection.\
\
## Flow\
1. User A creates an RSA key pair (`private_key.pem`, `public_key.pem`).\
2. User B writes the secret in `message.txt`, encrypts it with AES-256, then encrypts the AES key using User A\'92s RSA public key.\
3. AES-encrypted message \uc0\u8594  `encrypted_message.bin`\
4. RSA-encrypted AES key \uc0\u8594  `aes_key_encrypted.bin`\
5. User A decrypts the AES key with their private RSA key.\
6. Then decrypts the message and stores it in `decrypted_message.txt`.\
\
## Files\
- `encryptor.py`: Script to encrypt.\
- `decryptor.py`: Script to decrypt.\
- `user_a_keys/`: Stores RSA key pair.\
- `message.txt`: Original message.\
- `encrypted_message.bin`: AES-encrypted message.\
- `aes_key_encrypted.bin`: RSA-encrypted AES key.\
- `decrypted_message.txt`: Final decrypted message.\
}