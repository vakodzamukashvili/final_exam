{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 from Crypto.PublicKey import RSA\
from Crypto.Cipher import AES, PKCS1_OAEP\
from Crypto.Random import get_random_bytes\
import os\
\
# File paths\
MESSAGE_FILE = 'message.txt'\
ENCRYPTED_MESSAGE_FILE = 'encrypted_message.bin'\
ENCRYPTED_AES_KEY_FILE = 'aes_key_encrypted.bin'\
DECRYPTED_MESSAGE_FILE = 'decrypted_message.txt'\
PUBLIC_KEY_FILE = 'public_key.pem'\
PRIVATE_KEY_FILE = 'private_key.pem'\
\
\
def generate_rsa_keys():\
    key = RSA.generate(2048)\
    private_key = key.export_key()\
    public_key = key.publickey().export_key()\
\
    with open(PRIVATE_KEY_FILE, 'wb') as f:\
        f.write(private_key)\
    with open(PUBLIC_KEY_FILE, 'wb') as f:\
        f.write(public_key)\
\
\
def encrypt_message():\
    # Read message\
    with open(MESSAGE_FILE, 'rb') as f:\
        plaintext = f.read()\
\
    # Generate AES key and IV\
    aes_key = get_random_bytes(32)  # AES-256\
    iv = get_random_bytes(16)\
    cipher_aes = AES.new(aes_key, AES.MODE_CBC, iv)\
\
    # Pad plaintext to block size\
    pad_len = 16 - (len(plaintext) % 16)\
    plaintext_padded = plaintext + bytes([pad_len]) * pad_len\
\
    ciphertext = cipher_aes.encrypt(plaintext_padded)\
\
    # Save encrypted message with IV prepended\
    with open(ENCRYPTED_MESSAGE_FILE, 'wb') as f:\
        f.write(iv + ciphertext)\
\
    # Load public RSA key\
    with open(PUBLIC_KEY_FILE, 'rb') as f:\
        public_key = RSA.import_key(f.read())\
\
    # Encrypt AES key using RSA\
    cipher_rsa = PKCS1_OAEP.new(public_key)\
    encrypted_aes_key = cipher_rsa.encrypt(aes_key)\
\
    with open(ENCRYPTED_AES_KEY_FILE, 'wb') as f:\
        f.write(encrypted_aes_key)\
\
\
def decrypt_message():\
    # Load private RSA key\
    with open(PRIVATE_KEY_FILE, 'rb') as f:\
        private_key = RSA.import_key(f.read())\
\
    # Decrypt AES key\
    with open(ENCRYPTED_AES_KEY_FILE, 'rb') as f:\
        encrypted_aes_key = f.read()\
    cipher_rsa = PKCS1_OAEP.new(private_key)\
    aes_key = cipher_rsa.decrypt(encrypted_aes_key)\
\
    # Decrypt message\
    with open(ENCRYPTED_MESSAGE_FILE, 'rb') as f:\
        data = f.read()\
    iv = data[:16]\
    ciphertext = data[16:]\
\
    cipher_aes = AES.new(aes_key, AES.MODE_CBC, iv)\
    plaintext_padded = cipher_aes.decrypt(ciphertext)\
\
    pad_len = plaintext_padded[-1]\
    plaintext = plaintext_padded[:-pad_len]\
\
    with open(DECRYPTED_MESSAGE_FILE, 'wb') as f:\
        f.write(plaintext)\
\
\
if __name__ == '__main__':\
    # Step 1: Generate RSA keys (User A)\
    if not os.path.exists(PRIVATE_KEY_FILE):\
        generate_rsa_keys()\
        print("[+] RSA key pair generated.")\
\
    # Step 2: Encrypt message (User B)\
    encrypt_message()\
    print("[+] Message encrypted and AES key secured with RSA.")\
\
    # Step 3: Decrypt message (User A)\
    decrypt_message()\
    print("[+] Message decrypted successfully.")}